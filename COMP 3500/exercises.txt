1. In my implementation, it avoids starvation by checking if there are any mice waiting as soon as 2 cats have finished and if so then allows the mice to go into the kitchen before any more cats are allowed to come in and eat. Then if no mice are waiting, then two more cats are allowed to go and eat, this gives mice priority and keeps them from starving. After two mice eat in the kitchen, then two cats are allowed into the kitchen. This allows cats and mice to take turns and avoids starvation for both.
2. I can see that semaphores can be used in many ways to solve synchronization problems. There are disadvantages and advantages for implementing semaphores. For example, when you want to signal more than one resources is available for a semaphore, you must signal two different times. This was used to control the number of mice or cats allowed to eat in their turn. But a disadvantage is that you can only call wait() for a semaphore one at a time because otherwise you would continually decrement your semaphore counter and no mice or cat would be able to go and eat.